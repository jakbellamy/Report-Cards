{"ast":null,"code":"import { calculatePercentChange } from '../../../functions/dataMethods';\nimport { printPercent } from '../../../functions/dataDisplayers';\n\nvar valueKeyText = function valueKeyText(period) {\n  if (period === 'YOY') {\n    return 'YTD Market Share Volume';\n  } else {\n    return 'Market Share Volume';\n  }\n};\n\nvar formatPercentAsString = function formatPercentAsString(percentInt) {\n  var toFixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var percentStr = (percentInt * 100).toFixed(toFixed).toString() + '%';\n  var intSign = percentStr.includes('-') ? '' : '+';\n  return intSign + percentStr;\n}; // const forma\n\n\nexport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString };","map":{"version":3,"sources":["/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataFunctions.js"],"names":["calculatePercentChange","printPercent","valueKeyText","period","formatPercentAsString","percentInt","toFixed","percentStr","toString","intSign","includes"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC;AACA,SAASC,YAAT,QAA6B,mCAA7B;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;AAC/B,MAAIA,MAAM,KAAK,KAAf,EAAsB;AACpB,WAAO,yBAAP;AACD,GAFD,MAEO;AACL,WAAO,qBAAP;AACD;AACF,CAND;;AAQA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,UAAD,EAA6B;AAAA,MAAhBC,OAAgB,uEAAN,CAAM;AACzD,MAAIC,UAAU,GACZ,CAACF,UAAU,GAAG,GAAd,EACGC,OADH,CACWA,OADX,EAEGE,QAFH,KAEgB,GAHlB;AAKA,MAAIC,OAAO,GAAGF,UAAU,CAACG,QAAX,CAAoB,GAApB,IAA2B,EAA3B,GAAgC,GAA9C;AACA,SAAOD,OAAO,GAAGF,UAAjB;AACD,CARD,C,CAUA;;;AAEA,SACEL,YADF,EAEEF,sBAFF,EAGEC,YAHF,EAIEG,qBAJF","sourcesContent":["import { calculatePercentChange } from '../../../functions/dataMethods';\nimport { printPercent } from '../../../functions/dataDisplayers';\n\nconst valueKeyText = (period) => {\n  if (period === 'YOY') {\n    return 'YTD Market Share Volume';\n  } else {\n    return 'Market Share Volume';\n  }\n};\n\nconst formatPercentAsString = (percentInt, toFixed = 2) => {\n  let percentStr = (\n    (percentInt * 100)\n      .toFixed(toFixed)\n      .toString() + '%'\n  );\n  let intSign = percentStr.includes('-') ? '' : '+';\n  return intSign + percentStr;\n};\n\n// const forma\n\nexport {\n  valueKeyText,\n  calculatePercentChange,\n  printPercent,\n  formatPercentAsString\n};\n"]},"metadata":{},"sourceType":"module"}