{"ast":null,"code":"var _jsxFileName = \"/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataBox/DataPoints/RetroData.js\";\nimport React, { useEffect } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { DataBox } from '../DataBox';\nimport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString } from '../../DataFunctions';\nexport default function RetroDataGrid(props) {\n  var _this = this;\n\n  var data = props.data;\n  var cardData = [];\n  useEffect(function () {\n    var finalMonth = data.filter(function (x) {\n      return Number(x['Date'].split(' ')[1]) === 2020;\n    }).reverse()[0];\n    var comparableMonth = data.filter(function (x) {\n      return Number(x['Date'].split(' ')[1]) === 2019;\n    }).reverse()[0];\n    console.log(comparableMonth);\n    var targetMetrics = ['Market Share', 'Supreme Volume', 'Office Volume'];\n\n    for (var _i = 0, _targetMetrics = targetMetrics; _i < _targetMetrics.length; _i++) {\n      var metric = _targetMetrics[_i];\n      var captions = ['', ''];\n      var percentChangeStr = '';\n      var valueKey = 'YTD ' + metric;\n\n      if (comparableMonth) {\n        captions = [finalMonth['Date'], comparableMonth['Date']];\n        var percentChangeInt = calculatePercentChange(valueKey, finalMonth, comparableMonth);\n        percentChangeStr = formatPercentAsString(percentChangeInt, 0);\n      } else if (finalMonth) {\n        captions = [finalMonth['Date'], ''];\n      } else {\n        captions = [];\n      }\n\n      var valueYTD = finalMonth ? printPercent(finalMonth[valueKey]) : '';\n      var valueComp = comparableMonth ? printPercent(comparableMonth[valueKey]) : '';\n      cardData.push([metric, valueYTD, valueComp, percentChangeStr, captions]);\n    }\n  }, []);\n  return (\n    /*#__PURE__*/\n    React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, cardData.map(function (card) {\n      return (\n        /*#__PURE__*/\n        React.createElement(Grid, {\n          item: true,\n          xs: 4,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 9\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(DataBox, {\n          title: card[0],\n          valueYTD: card[1],\n          valueComp: card[2],\n          differenceValue: card[3],\n          captions: card[4],\n          period: '2020 Year End',\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 11\n          }\n        }))\n      );\n    }))\n  );\n}","map":{"version":3,"sources":["/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataBox/DataPoints/RetroData.js"],"names":["React","useEffect","Grid","DataBox","valueKeyText","calculatePercentChange","printPercent","formatPercentAsString","RetroDataGrid","props","data","cardData","finalMonth","filter","x","Number","split","reverse","comparableMonth","console","log","targetMetrics","metric","captions","percentChangeStr","valueKey","percentChangeInt","valueYTD","valueComp","push","map","card"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { DataBox } from '../DataBox';\nimport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString } from '../../DataFunctions';\n\nexport default function RetroDataGrid(props) {\n  const {data} = props;\n  let cardData = []\n\n  useEffect(() => {\n    const finalMonth = data.filter(x => Number(x['Date'].split(' ')[1]) === 2020).reverse()[0]\n    const comparableMonth = data.filter(x => Number(x['Date'].split(' ')[1]) === 2019).reverse()[0]\n\n    console.log(comparableMonth)\n    const targetMetrics = ['Market Share', 'Supreme Volume', 'Office Volume']\n    for(let metric of targetMetrics){\n      let captions = ['', ''];\n      let percentChangeStr = '';\n      let valueKey = 'YTD ' + metric\n\n\n      if (comparableMonth) {\n        captions = [finalMonth['Date'], comparableMonth['Date']];\n        let percentChangeInt = calculatePercentChange(valueKey, finalMonth, comparableMonth);\n        percentChangeStr = formatPercentAsString(percentChangeInt, 0);\n      } else if(finalMonth) {\n        captions = [finalMonth['Date'], '']\n      } else {\n        captions = []\n      }\n\n      let valueYTD = finalMonth ? printPercent(finalMonth[valueKey]) : '';\n      let valueComp = comparableMonth ? printPercent(comparableMonth[valueKey]) : '';\n\n      cardData.push([metric, valueYTD, valueComp, percentChangeStr, captions])\n    }\n  }, [])\n\n\n\n  return (\n    <Grid container spacing={3}>\n      {cardData.map(card => (\n        <Grid item xs={4}>\n          <DataBox\n            title={card[0]}\n            valueYTD={card[1]}\n            valueComp={card[2]}\n            differenceValue={card[3]}\n            captions={card[4]}\n            period={'2020 Year End'}\n            />\n        </Grid>\n      ))}\n    </Grid>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}