{"ast":null,"code":"import _ from 'lodash';\nimport jwt from 'jsonwebtoken';\nimport mock from 'src/src/utilities/utils/mock';\nvar JWT_SECRET = 'devias-top-secret-key';\nvar JWT_EXPIRES_IN = '2 days';\nvar users = [{\n  id: '1',\n  role: 'admin',\n  email: 'jakbellamy@gmail.com',\n  password: 'admin',\n  firstName: 'Jakob',\n  lastName: 'Bellamy'\n}, {\n  id: '00178682h1',\n  role: 'admin',\n  email: 'jmvolpe@nc.rr.com',\n  password: 'adminvolpe',\n  firstName: 'Jeanne',\n  lastName: 'Volpe'\n}, {\n  id: '00142682h1',\n  role: 'admin',\n  email: 'zachary.lavoy@supremelending.com',\n  password: 'adminlavoy',\n  firstName: 'Zachary',\n  lastName: 'LaVoy'\n}, {\n  id: '0019y682h1',\n  role: 'admin',\n  email: 'TJ.Flood@supremelending.com',\n  password: 'adminflood',\n  firstName: 'TJ',\n  lastName: 'Flood'\n}, {\n  id: 'bqcu4',\n  role: 'smgr',\n  email: 'Nick.Yeargin@supremelending.com',\n  password: 'ny6smgr',\n  firstName: 'Nick',\n  lastName: 'Yeargin',\n  accounts: [38, 5, 41, 6, 42, 7, 9, 11, 43, 13, 14, 15, 22, 17, 18, 19, 20, 21, 44, 25]\n}, {\n  id: 'b164bd',\n  role: 'admin',\n  email: 'John.Ragland.Jr@supremelending.com',\n  // not his real email\n  password: 'jr4smgr',\n  firstName: 'John',\n  lastName: 'Ragland',\n  accounts: []\n}, {\n  id: 'tuxb35',\n  role: 'admin',\n  email: 'Brian.Messer@supremelending.com',\n  password: 'bm8smgr',\n  firstName: 'Brian',\n  lastName: 'Messer',\n  accounts: []\n}, {\n  id: 'vs7d',\n  role: 'smgr',\n  email: 'Richard.Lester@supremelending.com',\n  password: 'rl9smgr',\n  firstName: 'Richard',\n  lastName: 'Lester',\n  accounts: [12, 24, 25]\n}, {\n  id: 'inw8c',\n  role: 'admin',\n  email: 'Amir.Davari@supremelending.com',\n  // Not his real Email\n  password: 'ad12smgr',\n  firstName: 'Amir',\n  lastName: 'Davari',\n  accounts: []\n}, {\n  id: 'qvnr61',\n  role: 'admin',\n  email: 'Scott.Mackie@supremelending.com',\n  password: 'sm91smgr',\n  firstName: 'Scott',\n  lastName: 'Mackie',\n  accounts: []\n}, {\n  id: '83hsyc7',\n  role: 'smgr',\n  email: 'Keith.Johnson@supremelending.com',\n  password: 'kj76smgr',\n  firstName: 'Keith',\n  lastName: 'Johnson',\n  accounts: [12, 25]\n}, {\n  id: '74hvs6',\n  role: 'admin',\n  email: 'Robert.Wills@supremelending.com',\n  password: 'rw24smgr',\n  firstName: 'Robert',\n  lastName: 'Wills',\n  accounts: []\n}, {\n  id: 'peb63m',\n  role: 'admin',\n  email: 'Tom.Flood@supremelending.com',\n  password: 'tf16smgr',\n  firstName: 'Tom',\n  lastName: 'Flood',\n  accounts: []\n}, {\n  id: 'y254nw',\n  role: 'admin',\n  email: 'Jeffrey.Sachs@supremelending.com',\n  password: 'js81smgr',\n  firstName: 'Jeffrey',\n  lastName: 'Sachs',\n  accounts: []\n}, {\n  id: 'nsdfuv72hvi',\n  role: 'admin',\n  email: 'Patrick.Flood@supremelending.com',\n  password: 'adminpflood',\n  firstName: 'Pat',\n  lastName: 'Flood'\n}, {\n  id: 'bniw27unv',\n  role: 'smgr',\n  email: 'Lisa.Spencer@supremelending.com',\n  password: 'ls88adm',\n  firstName: 'Lisa',\n  lastName: 'Spencer',\n  accounts: [1, 40, 3, 4, 5, 8, 10, 23, 39, 26, 27, 28]\n}, {\n  id: 'vjsd3452f3',\n  role: 'smgr',\n  email: 'Cale.Iorg@supremelending.com',\n  password: 'ci46smgr',\n  firstName: 'Cale',\n  lastName: 'Iorg',\n  accounts: [20, 42, 25]\n}];\nvar db = {\n  users: users\n};\nmock.onPost('/api/account/login').reply(function (config) {\n  var _JSON$parse = JSON.parse(config.data),\n      email = _JSON$parse.email,\n      password = _JSON$parse.password;\n\n  var user = db.users.find(function (user) {\n    return user.email.toLowerCase() === email.toLowerCase() && user.password === password;\n  });\n\n  if (user) {\n    var accessToken = jwt.sign({\n      id: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_EXPIRES_IN\n    });\n    return [200, {\n      user: user,\n      accessToken: accessToken\n    }];\n  } else {\n    return [400, {\n      message: 'Please check your email and password'\n    }];\n  }\n});\nmock.onGet('/api/account/me').reply(function (config) {\n  var Authorization = config.headers.Authorization;\n\n  if (!Authorization) {\n    return [401, {\n      message: 'Authorization token missing'\n    }];\n  }\n\n  try {\n    var accessToken = Authorization.split(' ')[1];\n\n    var _jwt$verify = jwt.verify(accessToken, JWT_SECRET),\n        id = _jwt$verify.id;\n\n    var user = db.users.find(function (user) {\n      return user.id === id;\n    });\n\n    if (!user) {\n      return [401, {\n        message: 'Invalid authorization token'\n      }];\n    }\n\n    return [200, {\n      user: user\n    }];\n  } catch (error) {\n    return [401, {\n      message: 'Invalid authorization token'\n    }];\n  }\n});\nmock.onPost('/api/account/profile').reply(function (request) {\n  var _JSON$parse2 = JSON.parse(request.data),\n      update = _JSON$parse2.update;\n\n  _.assign(db.user, update);\n\n  return [200, {\n    user: db.user\n  }];\n});\nmock.onGet('/api/account/settings').reply(200, {\n  settings: {}\n});\nmock.onGet('/api/account/subscription').reply(200, {\n  subscription: {\n    name: 'Freelancer',\n    price: '5',\n    currency: '$',\n    proposalsLeft: 12,\n    templatesLeft: 5,\n    invitesLeft: 24,\n    adsLeft: 10,\n    hasAnalytics: true,\n    hasEmailAlerts: true\n  }\n});","map":{"version":3,"sources":["/Users/jakobbellamy/Dev/refactor/Report-Cards/src/src/utilities/mock/accountMock.js"],"names":["_","jwt","mock","JWT_SECRET","JWT_EXPIRES_IN","users","id","role","email","password","firstName","lastName","accounts","db","onPost","reply","config","JSON","parse","data","user","find","toLowerCase","accessToken","sign","expiresIn","message","onGet","Authorization","headers","split","verify","error","request","update","assign","settings","subscription","name","price","currency","proposalsLeft","templatesLeft","invitesLeft","adsLeft","hasAnalytics","hasEmailAlerts"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport jwt from 'jsonwebtoken';\nimport mock from 'src/src/utilities/utils/mock';\nconst JWT_SECRET = 'devias-top-secret-key';\nconst JWT_EXPIRES_IN = '2 days';\n\nconst users = [\n  {\n    id: '1',\n    role: 'admin',\n    email: 'jakbellamy@gmail.com',\n    password: 'admin',\n    firstName: 'Jakob',\n    lastName: 'Bellamy',\n  },\n  {\n    id: '00178682h1',\n    role: 'admin',\n    email: 'jmvolpe@nc.rr.com',\n    password: 'adminvolpe',\n    firstName: 'Jeanne',\n    lastName: 'Volpe',\n  },\n  {\n    id: '00142682h1',\n    role: 'admin',\n    email: 'zachary.lavoy@supremelending.com',\n    password: 'adminlavoy',\n    firstName: 'Zachary',\n    lastName: 'LaVoy',\n  },\n  {\n    id: '0019y682h1',\n    role: 'admin',\n    email: 'TJ.Flood@supremelending.com',\n    password: 'adminflood',\n    firstName: 'TJ',\n    lastName: 'Flood',\n  },\n  {\n    id: 'bqcu4',\n    role: 'smgr',\n    email: 'Nick.Yeargin@supremelending.com',\n    password: 'ny6smgr',\n    firstName: 'Nick',\n    lastName: 'Yeargin',\n    accounts: [38, 5, 41, 6, 42, 7, 9, 11, 43, 13, 14, 15, 22, 17, 18, 19, 20, 21, 44, 25]\n  },\n  {\n    id: 'b164bd',\n    role: 'admin',\n    email: 'John.Ragland.Jr@supremelending.com', // not his real email\n    password: 'jr4smgr',\n    firstName: 'John',\n    lastName: 'Ragland',\n    accounts: []\n  },\n  {\n    id: 'tuxb35',\n    role: 'admin',\n    email: 'Brian.Messer@supremelending.com',\n    password: 'bm8smgr',\n    firstName: 'Brian',\n    lastName: 'Messer',\n    accounts: []\n  },\n  {\n    id: 'vs7d',\n    role: 'smgr',\n    email: 'Richard.Lester@supremelending.com',\n    password: 'rl9smgr',\n    firstName: 'Richard',\n    lastName: 'Lester',\n    accounts: [12, 24, 25]\n  },\n  {\n    id: 'inw8c',\n    role: 'admin',\n    email: 'Amir.Davari@supremelending.com', // Not his real Email\n    password: 'ad12smgr',\n    firstName: 'Amir',\n    lastName: 'Davari',\n    accounts: []\n  },\n  {\n    id: 'qvnr61',\n    role: 'admin',\n    email: 'Scott.Mackie@supremelending.com',\n    password: 'sm91smgr',\n    firstName: 'Scott',\n    lastName: 'Mackie',\n    accounts: []\n  },\n  {\n    id: '83hsyc7',\n    role: 'smgr',\n    email: 'Keith.Johnson@supremelending.com',\n    password: 'kj76smgr',\n    firstName: 'Keith',\n    lastName: 'Johnson',\n    accounts: [12, 25]\n  },\n  {\n    id: '74hvs6',\n    role: 'admin',\n    email: 'Robert.Wills@supremelending.com',\n    password: 'rw24smgr',\n    firstName: 'Robert',\n    lastName: 'Wills',\n    accounts: []\n  },\n  {\n    id: 'peb63m',\n    role: 'admin',\n    email: 'Tom.Flood@supremelending.com',\n    password: 'tf16smgr',\n    firstName: 'Tom',\n    lastName: 'Flood',\n    accounts: []\n  },\n  {\n    id: 'y254nw',\n    role: 'admin',\n    email: 'Jeffrey.Sachs@supremelending.com',\n    password: 'js81smgr',\n    firstName: 'Jeffrey',\n    lastName: 'Sachs',\n    accounts: []\n  },\n  {\n    id: 'nsdfuv72hvi',\n    role: 'admin',\n    email: 'Patrick.Flood@supremelending.com',\n    password: 'adminpflood',\n    firstName: 'Pat',\n    lastName: 'Flood'\n  },\n  {\n    id: 'bniw27unv',\n    role: 'smgr',\n    email: 'Lisa.Spencer@supremelending.com',\n    password: 'ls88adm',\n    firstName: 'Lisa',\n    lastName: 'Spencer',\n    accounts: [1, 40, 3, 4, 5, 8, 10, 23, 39, 26, 27, 28]\n  },\n  {\n    id: 'vjsd3452f3',\n    role: 'smgr',\n    email: 'Cale.Iorg@supremelending.com',\n    password: 'ci46smgr',\n    firstName: 'Cale',\n    lastName: 'Iorg',\n    accounts: [20, 42, 25]\n  },\n]\n\nconst db = {\n  users: users\n};\n\nmock.onPost('/api/account/login').reply((config) => {\n  const { email, password } = JSON.parse(config.data);\n\n  let user = db.users.find(user => {\n    return user.email.toLowerCase() === email.toLowerCase() && user.password === password\n  })\n\n  if(user){\n    const accessToken = jwt.sign(\n      { id: user.id },\n      JWT_SECRET,\n      { expiresIn: JWT_EXPIRES_IN }\n    );\n    return [200, { user, accessToken }];\n  } else {\n      return [400, { message: 'Please check your email and password' }];\n    }\n\n});\n\nmock.onGet('/api/account/me').reply((config) => {\n  const { Authorization } = config.headers;\n\n  if (!Authorization) {\n    return [401, { message: 'Authorization token missing' }];\n  }\n\n  try {\n    const accessToken = Authorization.split(' ')[1];\n\n    const { id } = jwt.verify(accessToken, JWT_SECRET);\n\n    let user = db.users.find(user => {\n      return user.id === id\n    })\n\n    if (!user) {\n      return [401, { message: 'Invalid authorization token' }];\n    }\n\n    return [200, { user: user }];\n  } catch (error) {\n    return [401, { message: 'Invalid authorization token' }];\n  }\n});\n\nmock.onPost('/api/account/profile').reply((request) => {\n  const { update } = JSON.parse(request.data);\n\n  _.assign(db.user, update);\n\n  return [200, { user: db.user }];\n});\n\nmock.onGet('/api/account/settings').reply(200, {\n  settings: {}\n});\n\nmock.onGet('/api/account/subscription').reply(200, {\n  subscription: {\n    name: 'Freelancer',\n    price: '5',\n    currency: '$',\n    proposalsLeft: 12,\n    templatesLeft: 5,\n    invitesLeft: 24,\n    adsLeft: 10,\n    hasAnalytics: true,\n    hasEmailAlerts: true\n  }\n});\n"]},"metadata":{},"sourceType":"module"}