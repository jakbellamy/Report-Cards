{"ast":null,"code":"import _slicedToArray from \"/Users/jakobbellamy/Dev/refactor/Report-Cards/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataBox/DataPoints/RetroData.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { DataBox } from '../DataBox';\nimport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString } from '../../DataFunctions';\nimport { TriDataBox } from '../TriDataBox';\nexport default function RetroDataGrid(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      finalMonth = _useState2[0],\n      setFinalMonth = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      comparableMonth = _useState4[0],\n      setComparableMonth = _useState4[1]; // const [cardData, setCardData] = useState([])\n\n\n  var data = props.data;\n  useEffect(function () {\n    setFinalMonth(data.filter(function (x) {\n      return Number(x['Date'].split(' ')[1]) === 2020;\n    }).reverse()[0]);\n    setComparableMonth(data.filter(function (x) {\n      return Number(x['Date'].split(' ')[1]) === 2019;\n    }).reverse()[0]);\n  });\n  var cardData = [];\n  var targetMetrics = ['Market Share', 'Supreme Volume', 'Office Volume'];\n\n  for (var _i = 0, _targetMetrics = targetMetrics; _i < _targetMetrics.length; _i++) {\n    var metric = _targetMetrics[_i];\n    var captions = ['', ''];\n    var percentChangeInt = 0;\n    var valueKey = 'YTD ' + metric;\n\n    if (comparableMonth) {\n      captions = [finalMonth['Date'], comparableMonth['Date']];\n\n      var _percentChangeInt = calculatePercentChange(valueKey, finalMonth, comparableMonth);\n    } else if (finalMonth) {\n      captions = [finalMonth['Date'], ''];\n    } else {\n      captions = [];\n    }\n\n    var valueYTD = finalMonth && finalMonth[valueKey] ? printPercent(finalMonth[valueKey].toFixed(0)) : '';\n    var valueComp = comparableMonth && comparableMonth[valueKey] ? printPercent(comparableMonth[valueKey].toFixed(0)) : '';\n    cardData.push([metric, valueYTD, valueComp, percentChangeInt.toFixed(1) + '%', captions]);\n  }\n\n  return (\n    /*#__PURE__*/\n    React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, cardData.map(function (card) {\n      return (\n        /*#__PURE__*/\n        React.createElement(Grid, {\n          item: true,\n          xs: 6,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 9\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(TriDataBox, {\n          title: card[0],\n          valueYTD: card[1],\n          valueComp: card[2],\n          differenceValue: card[3],\n          captions: card[4],\n          period: '2020 Year End',\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }\n        }))\n      );\n    }))\n  );\n}","map":{"version":3,"sources":["/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataBox/DataPoints/RetroData.js"],"names":["React","useEffect","useState","Grid","DataBox","valueKeyText","calculatePercentChange","printPercent","formatPercentAsString","TriDataBox","RetroDataGrid","props","finalMonth","setFinalMonth","comparableMonth","setComparableMonth","data","filter","x","Number","split","reverse","cardData","targetMetrics","metric","captions","percentChangeInt","valueKey","valueYTD","toFixed","valueComp","push","map","card"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { DataBox } from '../DataBox';\nimport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString } from '../../DataFunctions';\nimport { TriDataBox } from '../TriDataBox';\n\nexport default function RetroDataGrid(props) {\n  const [finalMonth, setFinalMonth] = useState([])\n  const [comparableMonth, setComparableMonth] = useState([])\n\n  // const [cardData, setCardData] = useState([])\n  const {data} = props;\n\n  useEffect(() => {\n    setFinalMonth(data.filter(x => Number(x['Date'].split(' ')[1]) === 2020).reverse()[0])\n    setComparableMonth(data.filter(x => Number(x['Date'].split(' ')[1]) === 2019).reverse()[0])\n  })\n\n  let cardData = []\n  const targetMetrics = ['Market Share', 'Supreme Volume', 'Office Volume']\n  for(let metric of targetMetrics){\n    let captions = ['', ''];\n    let percentChangeInt = 0;\n    let valueKey = 'YTD ' + metric\n\n\n    if (comparableMonth) {\n      captions = [finalMonth['Date'], comparableMonth['Date']];\n      let percentChangeInt = calculatePercentChange(valueKey, finalMonth, comparableMonth);\n    } else if(finalMonth) {\n      captions = [finalMonth['Date'], '']\n    } else {\n      captions = []\n    }\n\n    let valueYTD = finalMonth && finalMonth[valueKey] ? printPercent(finalMonth[valueKey].toFixed(0)) : '';\n    let valueComp = comparableMonth && comparableMonth[valueKey] ? printPercent(comparableMonth[valueKey].toFixed(0)) : '';\n\n    cardData.push([metric, valueYTD, valueComp, percentChangeInt.toFixed(1) + '%', captions])\n  }\n\n\n  return (\n    <Grid container spacing={3}>\n      {cardData.map(card => (\n        <Grid item xs={6}>\n          <TriDataBox\n            title={card[0]}\n            valueYTD={card[1]}\n            valueComp={card[2]}\n            differenceValue={card[3]}\n            captions={card[4]}\n            period={'2020 Year End'}\n            />\n        </Grid>\n      ))}\n    </Grid>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}