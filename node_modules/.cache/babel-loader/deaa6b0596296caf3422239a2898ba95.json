{"ast":null,"code":"var _jsxFileName = \"/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataBox/DataPoints/RetroData.js\";\nimport React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { DataBox } from '../DataBox';\nimport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString } from '../../DataFunctions';\nexport default function RetroDataGrid(props) {\n  var data = props.data;\n  var cardData = [];\n  var targetMetrics = ['Market Share', 'Supreme Volume', 'Office Volume'];\n\n  for (var _i = 0, _targetMetrics = targetMetrics; _i < _targetMetrics.length; _i++) {\n    var metric = _targetMetrics[_i];\n    var captions = ['', ''];\n    var percentChangeStr = '';\n    var valueKey = 'YTD ' + metric;\n    var finalMonth = data.filter(function (x) {\n      return Number(x['Date'].split(', ')) === 2020;\n    })[0];\n\n    if (comparableMonth) {\n      captions = [finalMonth['Date'], comparableMonth['Date']];\n      var percentChangeInt = calculatePercentChange(valueKey, finalMonth, comparableMonth);\n      percentChangeStr = formatPercentAsString(percentChangeInt, 0);\n    }\n\n    var valueYTD = finalMonth[valueKey] ? printPercent(finalMonth[valueKey]) : '';\n    var valueComp = comparableMonth[valueKey] ? printPercent(comparableMonth[valueKey]) : '';\n  } //\n  //\n\n\n  return (\n    /*#__PURE__*/\n    React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    })\n  );\n}","map":{"version":3,"sources":["/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataBox/DataPoints/RetroData.js"],"names":["React","Grid","DataBox","valueKeyText","calculatePercentChange","printPercent","formatPercentAsString","RetroDataGrid","props","data","cardData","targetMetrics","metric","captions","percentChangeStr","valueKey","finalMonth","filter","x","Number","split","comparableMonth","percentChangeInt","valueYTD","valueComp"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,YAAT,EAAuBC,sBAAvB,EAA+CC,YAA/C,EAA6DC,qBAA7D,QAA0F,qBAA1F;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,MACpCC,IADoC,GAC5BD,KAD4B,CACpCC,IADoC;AAE3C,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAMC,aAAa,GAAG,CAAC,cAAD,EAAiB,gBAAjB,EAAmC,eAAnC,CAAtB;;AACA,oCAAkBA,aAAlB,oCAAgC;AAA5B,QAAIC,MAAM,qBAAV;AACF,QAAIC,QAAQ,GAAG,CAAC,EAAD,EAAK,EAAL,CAAf;AACA,QAAIC,gBAAgB,GAAG,EAAvB;AACA,QAAIC,QAAQ,GAAG,SAASH,MAAxB;AAEA,QAAII,UAAU,GAAGP,IAAI,CAACQ,MAAL,CAAY,UAAAC,CAAC;AAAA,aAAIC,MAAM,CAACD,CAAC,CAAC,MAAD,CAAD,CAAUE,KAAV,CAAgB,IAAhB,CAAD,CAAN,KAAkC,IAAtC;AAAA,KAAb,EAAyD,CAAzD,CAAjB;;AAEA,QAAIC,eAAJ,EAAqB;AACnBR,MAAAA,QAAQ,GAAG,CAACG,UAAU,CAAC,MAAD,CAAX,EAAqBK,eAAe,CAAC,MAAD,CAApC,CAAX;AACA,UAAIC,gBAAgB,GAAGlB,sBAAsB,CAACW,QAAD,EAAWC,UAAX,EAAuBK,eAAvB,CAA7C;AACAP,MAAAA,gBAAgB,GAAGR,qBAAqB,CAACgB,gBAAD,EAAmB,CAAnB,CAAxC;AACD;;AAED,QAAIC,QAAQ,GAAGP,UAAU,CAACD,QAAD,CAAV,GAAuBV,YAAY,CAACW,UAAU,CAACD,QAAD,CAAX,CAAnC,GAA4D,EAA3E;AACA,QAAIS,SAAS,GAAGH,eAAe,CAACN,QAAD,CAAf,GAA4BV,YAAY,CAACgB,eAAe,CAACN,QAAD,CAAhB,CAAxC,GAAsE,EAAtF;AACD,GAnB0C,CAoB3C;AACA;;;AACA;AAAA;AACE,wBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAiBD","sourcesContent":["import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { DataBox } from '../DataBox';\nimport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString } from '../../DataFunctions';\n\nexport default function RetroDataGrid(props) {\n  const {data} = props;\n  let cardData = []\n  const targetMetrics = ['Market Share', 'Supreme Volume', 'Office Volume']\n  for(let metric of targetMetrics){\n    let captions = ['', ''];\n    let percentChangeStr = '';\n    let valueKey = 'YTD ' + metric\n\n    let finalMonth = data.filter(x => Number(x['Date'].split(', ')) === 2020)[0]\n\n    if (comparableMonth) {\n      captions = [finalMonth['Date'], comparableMonth['Date']];\n      let percentChangeInt = calculatePercentChange(valueKey, finalMonth, comparableMonth);\n      percentChangeStr = formatPercentAsString(percentChangeInt, 0);\n    }\n\n    let valueYTD = finalMonth[valueKey] ? printPercent(finalMonth[valueKey]) : '';\n    let valueComp = comparableMonth[valueKey] ? printPercent(comparableMonth[valueKey]) : '';\n  }\n  //\n  //\n  return (\n    <Grid container spacing={3}>\n  {/*//     {cardData.map(card => (*/}\n  {/*//       <Grid item xs={4}>*/}\n  {/*//         <DataBox*/}\n  {/*//           title={key}*/}\n  {/*//           valueYTD={valueYTD}*/}\n  {/*//           valueComp={valueComp}*/}\n  {/*//           differenceValue={percentChangeStr}*/}\n  {/*//           captions={captions}*/}\n  {/*//           period={'2020 Year End'}*/}\n  {/*//           />*/}\n  {/*//       </Grid>*/}\n  {/*//     ))}*/}\n    </Grid>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}