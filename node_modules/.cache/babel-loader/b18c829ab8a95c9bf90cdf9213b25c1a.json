{"ast":null,"code":"var _jsxFileName = \"/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataBox/DataPoints/RetroData.js\";\nimport React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { DataBox } from '../DataBox';\nimport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString } from '../../DataFunctions';\nexport default function RetroDataGrid(props) {\n  var _this = this;\n\n  var data = props.data;\n  var cardData = [];\n  var targetMetrics = ['Market Share', 'Supreme Volume', 'Office Volume'];\n\n  for (var _i = 0, _targetMetrics = targetMetrics; _i < _targetMetrics.length; _i++) {\n    var metric = _targetMetrics[_i];\n    var _captions = ['', ''];\n    var _percentChangeStr = '';\n    var valueKey = 'YTD ' + metric;\n    var finalMonth = data.filter(function (x) {\n      return x['Date'].split('');\n    });\n\n    if (comparableMonth) {\n      _captions = [finalMonth['Date'], comparableMonth['Date']];\n      var percentChangeInt = calculatePercentChange(valueKey, finalMonth, comparableMonth);\n      _percentChangeStr = formatPercentAsString(percentChangeInt, 0);\n    }\n\n    var _valueYTD = finalMonth[valueKey] ? printPercent(finalMonth[valueKey]) : '';\n\n    var _valueComp = comparableMonth[valueKey] ? printPercent(comparableMonth[valueKey]) : '';\n  }\n\n  return (\n    /*#__PURE__*/\n    React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    }, cardData.map(function (card) {\n      return (\n        /*#__PURE__*/\n        React.createElement(Grid, {\n          item: true,\n          xs: 4,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 9\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(DataBox, {\n          title: key,\n          valueYTD: valueYTD,\n          valueComp: valueComp,\n          differenceValue: percentChangeStr,\n          captions: captions,\n          period: '2020 Year End',\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 11\n          }\n        }))\n      );\n    }))\n  );\n}","map":{"version":3,"sources":["/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataBox/DataPoints/RetroData.js"],"names":["React","Grid","DataBox","valueKeyText","calculatePercentChange","printPercent","formatPercentAsString","RetroDataGrid","props","data","cardData","targetMetrics","metric","captions","percentChangeStr","valueKey","finalMonth","filter","x","split","comparableMonth","percentChangeInt","valueYTD","valueComp","map","card","key"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,YAAT,EAAuBC,sBAAvB,EAA+CC,YAA/C,EAA6DC,qBAA7D,QAA0F,qBAA1F;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAAA,MACpCC,IADoC,GAC5BD,KAD4B,CACpCC,IADoC;AAE3C,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAMC,aAAa,GAAG,CAAC,cAAD,EAAiB,gBAAjB,EAAmC,eAAnC,CAAtB;;AACA,oCAAkBA,aAAlB,oCAAgC;AAA5B,QAAIC,MAAM,qBAAV;AACF,QAAIC,SAAQ,GAAG,CAAC,EAAD,EAAK,EAAL,CAAf;AACA,QAAIC,iBAAgB,GAAG,EAAvB;AACA,QAAIC,QAAQ,GAAG,SAASH,MAAxB;AAEA,QAAII,UAAU,GAAGP,IAAI,CAACQ,MAAL,CAAY,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,MAAD,CAAD,CAAUC,KAAV,CAAgB,EAAhB,CAAJ;AAAA,KAAb,CAAjB;;AAEA,QAAIC,eAAJ,EAAqB;AACnBP,MAAAA,SAAQ,GAAG,CAACG,UAAU,CAAC,MAAD,CAAX,EAAqBI,eAAe,CAAC,MAAD,CAApC,CAAX;AACA,UAAIC,gBAAgB,GAAGjB,sBAAsB,CAACW,QAAD,EAAWC,UAAX,EAAuBI,eAAvB,CAA7C;AACAN,MAAAA,iBAAgB,GAAGR,qBAAqB,CAACe,gBAAD,EAAmB,CAAnB,CAAxC;AACD;;AAED,QAAIC,SAAQ,GAAGN,UAAU,CAACD,QAAD,CAAV,GAAuBV,YAAY,CAACW,UAAU,CAACD,QAAD,CAAX,CAAnC,GAA4D,EAA3E;;AACA,QAAIQ,UAAS,GAAGH,eAAe,CAACL,QAAD,CAAf,GAA4BV,YAAY,CAACe,eAAe,CAACL,QAAD,CAAhB,CAAxC,GAAsE,EAAtF;AACD;;AAGD;AAAA;AACE,wBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGL,QAAQ,CAACc,GAAT,CAAa,UAAAC,IAAI;AAAA;AAAA;AAChB,4BAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,4BAAC,OAAD;AACE,UAAA,KAAK,EAAEC,GADT;AAEE,UAAA,QAAQ,EAAEJ,QAFZ;AAGE,UAAA,SAAS,EAAEC,SAHb;AAIE,UAAA,eAAe,EAAET,gBAJnB;AAKE,UAAA,QAAQ,EAAED,QALZ;AAME,UAAA,MAAM,EAAE,eANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AADgB;AAAA,KAAjB,CADH;AADF;AAiBD","sourcesContent":["import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { DataBox } from '../DataBox';\nimport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString } from '../../DataFunctions';\n\nexport default function RetroDataGrid(props) {\n  const {data} = props;\n  let cardData = []\n  const targetMetrics = ['Market Share', 'Supreme Volume', 'Office Volume']\n  for(let metric of targetMetrics){\n    let captions = ['', ''];\n    let percentChangeStr = '';\n    let valueKey = 'YTD ' + metric\n\n    let finalMonth = data.filter(x => x['Date'].split(''))\n\n    if (comparableMonth) {\n      captions = [finalMonth['Date'], comparableMonth['Date']];\n      let percentChangeInt = calculatePercentChange(valueKey, finalMonth, comparableMonth);\n      percentChangeStr = formatPercentAsString(percentChangeInt, 0);\n    }\n\n    let valueYTD = finalMonth[valueKey] ? printPercent(finalMonth[valueKey]) : '';\n    let valueComp = comparableMonth[valueKey] ? printPercent(comparableMonth[valueKey]) : '';\n  }\n\n\n  return (\n    <Grid container spacing={3}>\n      {cardData.map(card => (\n        <Grid item xs={4}>\n          <DataBox\n            title={key}\n            valueYTD={valueYTD}\n            valueComp={valueComp}\n            differenceValue={percentChangeStr}\n            captions={captions}\n            period={'2020 Year End'}\n            />\n        </Grid>\n      ))}\n    </Grid>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}