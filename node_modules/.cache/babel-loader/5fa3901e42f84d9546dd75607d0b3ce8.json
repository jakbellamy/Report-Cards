{"ast":null,"code":"var _jsxFileName = \"/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataBox/DataPoints/MShareVolume.js\";\nimport React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { DataBox } from '../DataBox';\nimport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString } from '../../DataFunctions';\nexport default function MShareVolume(props) {\n  var thisMonth = props.thisMonth,\n      comparableMonth = props.comparableMonth,\n      period = props.period;\n  var captions = ['', ''];\n  var percentChangeStr = '';\n  var valueKey = valueKeyText(period);\n\n  if (comparableMonth) {\n    captions = [thisMonth['Date'], comparableMonth['Date']];\n    var percentChangeInt = calculatePercentChange(valueKey, thisMonth, comparableMonth);\n    percentChangeStr = formatPercentAsString(percentChangeInt, 0);\n  }\n\n  var valueYTD = thisMonth[valueKey] ? printPercent(thisMonth[valueKey]) : '0.00%';\n  var valueComp = comparableMonth[valueKey] ? printPercent(comparableMonth[valueKey]) : '0.00%';\n  percentChangeStr = percentChangeStr.includes('Inf') ? '+' + printPercent(thisMonth[valueKey], toDecimalPlace = '-2') : percentChangeStr;\n  return (\n    /*#__PURE__*/\n    React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(DataBox, {\n      title: 'Market Share',\n      valueYTD: valueYTD,\n      valueComp: valueComp,\n      differenceValue: percentChangeStr,\n      captions: captions,\n      period: 'Year-to-Date',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }))\n  );\n}","map":{"version":3,"sources":["/Users/jakobbellamy/Dev/refactor/Report-Cards/src/Report Card/src/Components/Data Components/DataBox/DataPoints/MShareVolume.js"],"names":["React","Grid","DataBox","valueKeyText","calculatePercentChange","printPercent","formatPercentAsString","MShareVolume","props","thisMonth","comparableMonth","period","captions","percentChangeStr","valueKey","percentChangeInt","valueYTD","valueComp","includes","toDecimalPlace"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,YAAT,EAAuBC,sBAAvB,EAA+CC,YAA/C,EAA6DC,qBAA7D,QAA0F,qBAA1F;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,MAClCC,SADkC,GACKD,KADL,CAClCC,SADkC;AAAA,MACvBC,eADuB,GACKF,KADL,CACvBE,eADuB;AAAA,MACNC,MADM,GACKH,KADL,CACNG,MADM;AAG1C,MAAIC,QAAQ,GAAG,CAAC,EAAD,EAAK,EAAL,CAAf;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,QAAQ,GAAGX,YAAY,CAACQ,MAAD,CAA3B;;AAEA,MAAID,eAAJ,EAAqB;AACnBE,IAAAA,QAAQ,GAAG,CAACH,SAAS,CAAC,MAAD,CAAV,EAAoBC,eAAe,CAAC,MAAD,CAAnC,CAAX;AACA,QAAIK,gBAAgB,GAAGX,sBAAsB,CAACU,QAAD,EAAWL,SAAX,EAAsBC,eAAtB,CAA7C;AACAG,IAAAA,gBAAgB,GAAGP,qBAAqB,CAACS,gBAAD,EAAmB,CAAnB,CAAxC;AACD;;AAED,MAAIC,QAAQ,GAAGP,SAAS,CAACK,QAAD,CAAT,GAAsBT,YAAY,CAACI,SAAS,CAACK,QAAD,CAAV,CAAlC,GAA0D,OAAzE;AACA,MAAIG,SAAS,GAAGP,eAAe,CAACI,QAAD,CAAf,GAA4BT,YAAY,CAACK,eAAe,CAACI,QAAD,CAAhB,CAAxC,GAAsE,OAAtF;AACAD,EAAAA,gBAAgB,GAAGA,gBAAgB,CAACK,QAAjB,CAA0B,KAA1B,IAAmC,MAAMb,YAAY,CAACI,SAAS,CAACK,QAAD,CAAV,EAAsBK,cAAc,GAAC,IAArC,CAArD,GAAkGN,gBAArH;AACA;AAAA;AACE,wBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,wBAAC,OAAD;AACE,MAAA,KAAK,EAAE,cADT;AAEE,MAAA,QAAQ,EAAEG,QAFZ;AAGE,MAAA,SAAS,EAAEC,SAHb;AAIE,MAAA,eAAe,EAAEJ,gBAJnB;AAKE,MAAA,QAAQ,EAAED,QALZ;AAME,MAAA,MAAM,EAAE,cANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AADF;AAYD","sourcesContent":["import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { DataBox } from '../DataBox';\nimport { valueKeyText, calculatePercentChange, printPercent, formatPercentAsString } from '../../DataFunctions';\n\nexport default function MShareVolume(props) {\n  const { thisMonth, comparableMonth, period } = props;\n\n  let captions = ['', ''];\n  let percentChangeStr = '';\n  let valueKey = valueKeyText(period);\n\n  if (comparableMonth) {\n    captions = [thisMonth['Date'], comparableMonth['Date']];\n    let percentChangeInt = calculatePercentChange(valueKey, thisMonth, comparableMonth);\n    percentChangeStr = formatPercentAsString(percentChangeInt, 0);\n  }\n\n  let valueYTD = thisMonth[valueKey] ? printPercent(thisMonth[valueKey]) : '0.00%';\n  let valueComp = comparableMonth[valueKey] ? printPercent(comparableMonth[valueKey]) : '0.00%';\n  percentChangeStr = percentChangeStr.includes('Inf') ? '+' + printPercent(thisMonth[valueKey], toDecimalPlace='-2') : percentChangeStr\n  return (\n    <Grid item xs={6}>\n      <DataBox\n        title={'Market Share'}\n        valueYTD={valueYTD}\n        valueComp={valueComp}\n        differenceValue={percentChangeStr}\n        captions={captions}\n        period={'Year-to-Date'}\n      />\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}